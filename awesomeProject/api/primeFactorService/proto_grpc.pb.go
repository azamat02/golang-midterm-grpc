// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeCalcServiceClient is the client API for PrimeCalcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeCalcServiceClient interface {
	Calc(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (PrimeCalcService_CalcClient, error)
}

type primeCalcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeCalcServiceClient(cc grpc.ClientConnInterface) PrimeCalcServiceClient {
	return &primeCalcServiceClient{cc}
}

func (c *primeCalcServiceClient) Calc(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (PrimeCalcService_CalcClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeCalcService_ServiceDesc.Streams[0], "/greet.PrimeCalcService/Calc", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeCalcServiceCalcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeCalcService_CalcClient interface {
	Recv() (*CalcResponse, error)
	grpc.ClientStream
}

type primeCalcServiceCalcClient struct {
	grpc.ClientStream
}

func (x *primeCalcServiceCalcClient) Recv() (*CalcResponse, error) {
	m := new(CalcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeCalcServiceServer is the server API for PrimeCalcService service.
// All implementations must embed UnimplementedPrimeCalcServiceServer
// for forward compatibility
type PrimeCalcServiceServer interface {
	Calc(*CalcRequest, PrimeCalcService_CalcServer) error
	mustEmbedUnimplementedPrimeCalcServiceServer()
}

// UnimplementedPrimeCalcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeCalcServiceServer struct {
}

func (UnimplementedPrimeCalcServiceServer) Calc(*CalcRequest, PrimeCalcService_CalcServer) error {
	return status.Errorf(codes.Unimplemented, "method Calc not implemented")
}
func (UnimplementedPrimeCalcServiceServer) mustEmbedUnimplementedPrimeCalcServiceServer() {}

// UnsafePrimeCalcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeCalcServiceServer will
// result in compilation errors.
type UnsafePrimeCalcServiceServer interface {
	mustEmbedUnimplementedPrimeCalcServiceServer()
}

func RegisterPrimeCalcServiceServer(s grpc.ServiceRegistrar, srv PrimeCalcServiceServer) {
	s.RegisterService(&PrimeCalcService_ServiceDesc, srv)
}

func _PrimeCalcService_Calc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CalcRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeCalcServiceServer).Calc(m, &primeCalcServiceCalcServer{stream})
}

type PrimeCalcService_CalcServer interface {
	Send(*CalcResponse) error
	grpc.ServerStream
}

type primeCalcServiceCalcServer struct {
	grpc.ServerStream
}

func (x *primeCalcServiceCalcServer) Send(m *CalcResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrimeCalcService_ServiceDesc is the grpc.ServiceDesc for PrimeCalcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeCalcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.PrimeCalcService",
	HandlerType: (*PrimeCalcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calc",
			Handler:       _PrimeCalcService_Calc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/primeFactorService/proto.proto",
}
